// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210621134631_ResearchTable")]
    partial class ResearchTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Domain.Entities.Research", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SearchStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Researchs");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRandomPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@gmail.com",
                            IsRandomPassword = true,
                            Name = "Admin",
                            PasswordHash = new byte[] { 143, 127, 73, 39, 103, 38, 241, 137, 222, 176, 68, 15, 253, 170, 6, 86, 92, 53, 168, 59, 21, 55, 128, 254, 218, 197, 205, 141, 171, 91, 31, 169, 31, 8, 61, 214, 14, 218, 17, 74, 98, 236, 46, 66, 68, 236, 73, 221, 8, 119, 82, 125, 39, 8, 204, 150, 109, 84, 204, 200, 104, 78, 232, 83 },
                            PasswordSalt = new byte[] { 55, 12, 229, 249, 176, 137, 204, 177, 147, 111, 151, 199, 125, 28, 175, 92, 149, 152, 126, 60, 162, 33, 210, 80, 224, 6, 246, 178, 153, 165, 75, 42, 231, 143, 158, 188, 215, 208, 216, 206, 62, 170, 81, 49, 20, 154, 106, 192, 94, 210, 81, 147, 161, 190, 185, 33, 174, 39, 216, 174, 197, 13, 105, 89, 129, 100, 59, 36, 78, 251, 180, 145, 80, 239, 44, 68, 84, 82, 251, 49, 32, 239, 231, 48, 4, 12, 187, 111, 126, 52, 0, 128, 206, 26, 57, 84, 133, 252, 107, 57, 11, 222, 100, 121, 136, 78, 187, 33, 246, 19, 147, 172, 214, 73, 232, 212, 71, 77, 95, 86, 164, 85, 180, 98, 108, 239, 38, 235 },
                            Role = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Research", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Research")
                        .HasForeignKey("Domain.Entities.Research", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Research");
                });
#pragma warning restore 612, 618
        }
    }
}
