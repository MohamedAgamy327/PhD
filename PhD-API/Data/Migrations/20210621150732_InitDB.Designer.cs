// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210621150732_InitDB")]
    partial class InitDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Domain.Entities.Research", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SearchStatus")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Researchs");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRandomPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@gmail.com",
                            IsRandomPassword = true,
                            Name = "Admin",
                            PasswordHash = new byte[] { 62, 247, 12, 79, 102, 129, 58, 195, 91, 12, 78, 136, 249, 73, 203, 34, 219, 224, 92, 126, 85, 43, 5, 52, 68, 233, 82, 79, 162, 143, 118, 65, 212, 13, 46, 119, 159, 220, 214, 153, 255, 59, 136, 123, 130, 204, 116, 137, 240, 178, 190, 131, 130, 20, 92, 169, 82, 26, 174, 224, 120, 251, 22, 7 },
                            PasswordSalt = new byte[] { 34, 58, 40, 95, 64, 37, 69, 91, 49, 21, 158, 47, 127, 104, 112, 219, 160, 159, 75, 75, 221, 94, 213, 142, 58, 1, 79, 217, 85, 218, 6, 230, 126, 240, 167, 100, 19, 58, 139, 243, 51, 228, 233, 110, 192, 249, 8, 92, 186, 96, 252, 71, 49, 165, 132, 125, 2, 28, 84, 122, 81, 147, 155, 64, 240, 100, 173, 136, 34, 143, 70, 163, 73, 94, 103, 255, 225, 128, 80, 238, 217, 155, 173, 207, 108, 26, 216, 215, 38, 155, 211, 64, 106, 5, 212, 72, 35, 36, 31, 51, 229, 142, 157, 243, 17, 153, 15, 211, 171, 241, 86, 252, 208, 92, 240, 78, 172, 209, 75, 110, 1, 85, 245, 235, 135, 174, 176, 92 },
                            Role = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Research", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Research")
                        .HasForeignKey("Domain.Entities.Research", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Research");
                });
#pragma warning restore 612, 618
        }
    }
}
