// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20210618105344_ResearcherTable")]
    partial class ResearcherTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Domain.Entities.Researcher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRandomPassword")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("SearchStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Researchers");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRandomPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin@gmail.com",
                            IsRandomPassword = true,
                            Name = "Admin",
                            PasswordHash = new byte[] { 151, 93, 142, 187, 111, 60, 200, 245, 215, 143, 1, 72, 154, 99, 155, 214, 48, 170, 174, 9, 233, 120, 84, 192, 58, 230, 120, 127, 184, 118, 168, 229, 63, 44, 108, 110, 233, 79, 169, 234, 139, 217, 120, 61, 81, 185, 65, 194, 29, 77, 101, 124, 152, 108, 57, 164, 36, 233, 161, 236, 205, 20, 196, 84 },
                            PasswordSalt = new byte[] { 190, 201, 228, 174, 253, 8, 156, 202, 24, 254, 96, 187, 228, 52, 147, 193, 23, 53, 134, 7, 77, 135, 182, 36, 84, 190, 213, 227, 200, 179, 200, 72, 103, 161, 67, 77, 240, 250, 63, 104, 42, 64, 160, 99, 210, 230, 109, 170, 185, 83, 254, 201, 228, 101, 230, 11, 25, 7, 186, 252, 36, 11, 43, 21, 82, 201, 0, 112, 84, 105, 112, 54, 62, 42, 209, 118, 139, 184, 9, 98, 155, 10, 133, 227, 236, 144, 81, 124, 140, 24, 136, 72, 27, 109, 40, 114, 26, 23, 136, 81, 95, 27, 143, 200, 147, 45, 91, 207, 38, 112, 207, 74, 165, 36, 209, 29, 65, 60, 41, 239, 66, 229, 5, 15, 147, 112, 151, 219 },
                            Role = 0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
